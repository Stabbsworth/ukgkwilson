//---------------------------AI Talk--------------------------
//Alright, this is it! The bread and butter of your ghost. This is where all their random conversations are stored. Of all the .dic files, this is the one you will probably be adding stuff to and updating the most as new dialogue comes to your mind. It is relatively simple in that there aren't many functions or real coding involved with this file, but there are a few cool tricks you can do within randomtalk that can make dialogue with interesting effects, so I'll point them out as we go along.
//I'm going to leave a lot of examples of different types of dialogue in here that you can study if the possibilities they present intrigue you. Study them carefully!

//Make sure to read the walkthrough (http://www.ashido.com/ukagaka/walkthrough.html) for more details about how to properly format ghost dialogue!
//I will reiterate that you should be editing these in Notepad++, and in particular, you should set the Language to C (or Java I guess) to properly highlight all the text. It will make things A LOT EASIER for you, trust me! It will also help you keep track of your brackets in case you forget some. If you click on a line with a bracket in Notepad++, it should highlight where the other bracket ends, or turn purple if there's no finishing bracket (which you should definitely fix!)
//It will also highlight my commented lines in green, so you'll know where they are. Any line beginning with // is a commented line that the code will not read. It's just for your reference!

//--AiTalk
//Leave this alone.
//Advanced users, this is mostly setting up whether or not dialogue is in a chain before it displays. Again, you can leave it alone unless you want to screw around with chains for some strange reason.

AiTalk
 {
	if RAND(100) < communicateratio
 	{
 		StartCommunicate
	}
 	else
	{
 		if mikireflag == 0
		{
			if CHAIN.IDName == "" {
 				lastTalk = RandomTalk
			}
			else {
				lastTalk = ChainTalk
			}
			lastTalk
		}
 		else
		{ 
		MikireTalk
 		}
	}
 }


//--RandomTalk 
 //Alright, here we go! This is where ALL your ghost's random dialogue will go! These are the conversations that they'll have with you or each other that pop up depending on the talk rate defined in menu.dic (or if you ignored that, set in bootend.dic in the first boot, which would be every five minutes).
 
//*********************Advanced User Info*******************************
//These text boxes are meant for those who have an interest in expanding or using more complicated functions in their ghost. Also for my own reference in the future since I plan on using this template too, haha. If you have no interest in any of this and just want to keep things as simple as possible, feel free to skip these boxes.

//ALL your random dialogue NEEDS to be in RandomTalk. You can't link to other functions or something from within RandomTalk, or a separate pool of convos in another .dic file, as far as I can tell. So, how do you then set up certain pools of dialogue that only happen when certain settings are in place (for example, when there are three characters on the screen instead of two) and won't happen when they are false? Basically, you just need to be creative with your if statements. You can nest a ton of ifs and elses in RandomTalk, and if you keep them straight, you can make a lot of dialogue here customized to whatever situation you can come up with. BUT again, you can't call other dialogue into here! I go more into how to set up a "mode" like that in the coding page of the walkthrough site.
//I GUESS you could set up more dialogue in an envelope perhaps (see word.dic) or another .dic file and then call it in here using envelopes, but that seems a bit redundant. Maybe someone else can think of a use for that though.

//The closest you can get to linking to outside dialogue is via chains, but I'll talk more about chains when we get to them. Being creative with chains can open up a lot of opportunities for you, such as presenting the user with choices every now and then, which I'm pretty sure you can't do within RandomTalk. Maybe you can, I usually do it via chains though. I'll have to experiment with this later.
//***********************************************************************

RandomTalk : nonoverlap
{
	//Alright, here is where all your dialogue will go. I hope you studied how to format dialogue carefully in the walkthrough, as there is little here I can help you with. You're going to have to write most of it yourself. So instead, I'll give you a set of examples to look at.
	
	//DEV: Muttering. \f[height,6] \f[default] \f[height,default]
	//DEV: Above isn't applicable. I've raised the font height to seven pixels, it should be somewhat visible. I'll also include a toggle at some point later on.
	
	//DEV: FUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUCK!!!!!
	//DEV: I HAD TO RESTART DEVELOPMENT ON THIS FUCKING THING *YET AGAIN* BECAUSE OF SOME FILE CORRUPTION.
	//DEV: YAYA IS AN UPDATED LANGUAGE, HOPEFULLY THAT DOESN'T HAPPEN AGAIN!
	//DEV: Weather-based talking.
	"\0\s[0]Is it sunny outside?\e"
	"\0\s[0]It's probably raining somewhere in the world right now.\e"
	"\0\s[0]It's probably raining somewhere else right now.\e"
	
	//DEV: Mentioning the other survivors.
	"\0\s[9]Does Woodie still even eat wood?\e"
	"\0\s[8]%(smalltext)I should see if I still can't get Woodie to eat wood. \w8For science.%(smalltextend)\e"
	"\0\s[6]%(smalltext)I have enough trouble with the-- %(moosegoose). I don't need Woodie turning into a goose too.%(smalltextend)\e"
	"\0\s[0]I wonder if Wendy's been enjoying a piggyback ride from Woodie recently.\e"
	"\0\s[0]Oh, right, I was supposed to be getting charcoal with Willow. \s[9]\w8%(smalltext)Whoops.%(smalltextend)\e"
	"\0\s[8]I wonder what Warly's cooking.\e"
	"\0\s[8]I wonder what Warly's cooking. He's good at it.\e"
	"\0\s[6]I ought to bother Webber about cutting back some of the spider dens. \w8\w8\s[9]%(smalltext)They're good at it, given that they're half-spider and all.%(smalltextend)\e"
	"\0\s[9]I ought to bother Webber about cutting back some of the spider dens. \w8\w8\s[4]%(smalltext)I don't like spiders...%(smalltextend)\e"
	"\0\s[4]I wish I would have kept a few trinkets by for the kids.\e"
	"\0\s[4]I wish I would have kept a few trinkets by for the kids. \w8\w8\n\n[half]%(smalltext)Not that I want to play with them and all.%(smalltextend)\e"
	"\0\s[4].\w8.\w8.\w8%(smalltext)I miss the others.%(smalltextend)\e"
	"\0\s[9]Wolfgang and Wigfrid were arm-wrestling a while back. I don't remember who won. \s[1]\w8%(smalltext)There might have been bets involved.%(smalltextend)\e"
	"\0\s[9]Maybe I'll go to bed early tonight. \w8\w8%(smalltext)Maybe.%(smalltextend)\e"
	"\0\s[6]Wickerbottom's usually getting on my back about not getting enough sleep. \s[9]\w8%(smalltext)I have plenty of shrooms. \w8Those'll keep the headache away, right?%(smalltextend)\e"
	"\0\s[0]Who's turn was it with the life amulet again?\e"
	"\0\s[4]I think %(dstsurvivors) had %(itemcompanion) last...\e"
	"\0\s[4]I'm fairly certain %(dstsurvivors) had %(itemcompanion) last.\e"
	"\0\s[4]I hope %(dstkids) has been playing nice with %(dstkids).\e"
	"\0\s[4]Hopefully Warly's cooking lesson is going well. He was supposed to be teaching %(dstkids) how to properly make spices.\e"
	"\0\s[1]%(smalltext)I should check in with Winona and see if she needs any help with repairing things.%(smalltextend)\e"
	"\0\s[8]Hmmn. Might be able to trade some more meat to the pig king. %(smalltext)Wigfrid hunts so much.%(smalltextend)\e"
	"\0\s[0]Winona's always going on about a union or something.\e"
	"\0\s[4]...%(smalltext)I just want to be useful.%(smalltextend)\e"
	
	//DEV: Muttering to himself.
	"\0\s[4]%(smalltext)I have a headache. Why do I have a headache?%(smalltextend)\e"
	"\0\s[9]%(smalltext)Of course my torch nearly ran out. The Constant is going to give me a heart attack one of these days.%(smalltextend)\e"
	"\0\s[6]%(smalltext)Uuuuugh. I need to repair the alchemy engine.%(smalltextend)\e"
	"\0\s[9]%(smalltext)I'm tired.%(smalltextend)\e"
	"\0\s[9]%(smalltext)I want a hug. So many hugs. Why.%(smalltextend)\e"
	"\0\s[4]%(smalltext)I think I've got something stuck in my teeth.%(smalltextend)\e"
	"\0\s[9]%(smalltext)Maybe I should use gold to strengthen it.%(smalltextend)\e"
	"\0\s[4]%(smalltext)I miss %(itemcompanion).%(smalltextend)\e"
	"\0\s[6]%(smalltext)Bahhhhh. I am filled with an utter sense of boredom that not even science can quantify.%(smalltextend)\e"
	"\0\s[1]%(smalltext)I want to do something. Hmmm.%(smalltextend)\e"
	"\0\s[6]%(smalltext)I swear everything's trying to drive me mad.%(smalltextend)\e"
	"\0\s[1]%(smalltext)Oh, the things I wish I could do here.%(smalltextend)\e"
	"\0\s[9]%(smalltext)Maybe this could be scientific. Gotta look on the bright side.%(smalltextend)\e"
	"\0\s[9]%(smalltext)Maybe this could be scientific. Theoretically.%(smalltextend)\e"
	"\0\s[9]%(smalltext)Maybe this could be scientific.%(smalltextend)\e"
	"\0\s[4]How many times have I died again?\w8\w8\w8\w8\w8\w8\w8\w8 \s[9]Bugger it all. \w8%(smalltext)I've lost count.%(smalltextend)\e"
	"\0\s[9]I ought to check the bee hives. \w8\s[8]%(smalltext)Maybe I'll get some honey out of it.%(smalltextend)\e"
	"\0\s[1]How many licks does it take to get to the center of a salt lick?\e"
	
	//DEV: recycling bin.
	"\0\s[6]%(smalltext)Jeez, you'd think the owner of this computer would clear out %(hisher) recycle bin every so often.%(smalltextend)\e"
	"\0\s[9]%(smalltext)Maybe I ought to clear out the recycle bin for %(himher).%(smalltextend)\e"
	"\0\s[6]%(smalltext)Ugh, so messy.%(smalltextend)\e"
	"\0\s[6]Your desktop's a mess.\e"
	"\0\s[4]You know, I could try and see if I can't clear out the recycling bin for you...?\e"
	"\0\s[9]%(smalltext)This is what I do when I'm bored, apparently. \w8Complain about how messy someone's desktop is.%(smalltextend)\e"
	"\0\s[1]%(smalltext)That recycling bin really needs to be cleaned out.%(smalltextend)\e"
	"\0\s[1]Have you considered cleaning out your recycling bin recently?\e"
	"\0\s[9]%(smalltext)Really, this place is so messy.%(smalltextend)\e"
	"\0\s[9]%(smalltext)This computer's a mess.%(smalltextend)\e"
	"\0\s[6]Maybe we could clean out the recycling bin. I can do that. \w8%(smalltext)\s[4]It'd give me something to do.%(smalltextend)\e"
	"\0\s[6]Maybe we could clean out the recycling bin. I can do that. \w8%(smalltext)\s[4]It'd give me something to do. \w8\s[9]Other than standing around, that is.%(smalltextend)\e"
	"\0\s[6](You're getting the feeling that he's judging how much trash you've accumulated on your computer.)\e"
	
	//DEV: wallpaper changing function.
	"\0\s[1]You know, I could try and change your desktop wallpaper if you wanted me to.\e"
	"\0\s[4]%(smalltext)I have some interior decorating skills. \w8I swear.%(smalltextend)\e"
	"\0\s[1]%(smalltext)A change to the wallpaper would be nice.%(smalltextend)\e"
	"\0\s[6]%(smalltext)A change to the wallpaper would be nice. \w8Spice of life, and all.%(smalltextend)\e"
	"\0\s[9]%(smalltext)This wallpaper is getting boring to look at, frankly.%(smalltextend)\e"
	"\0\s[8]%(smalltext)Hmmmn. \w8\w8I like this wallpaper.%(smalltextend)\e"
	"\0\s[8]%(smalltext)Well, at least the user has good taste in wallpapers.%(smalltextend)\e"
	"\0\s[1]%(smalltext)Maybe I should ask if I could change the wallpaper.%(smalltextend)\e"
	"\0\s[9]%(smalltext)This is what I do when I'm bored, apparently. \w8Complain about someone's wallpaper.%(smalltextend)\e"
	"\0\s[1]Have you considered changing your wallpaper recently?\e"
	"\0\s[1]Have you considered changing your desktop wallpaper recently?\e"
	"\0\s[1]Maybe we could change the desktop wallpaper. I can do that. \w8\s[4]%(smalltext)It'd give me something to do.%(smalltextend)\e"
	"\0\s[1]Maybe we could change the desktop wallpaper. I can do that. \w8\s[4]%(smalltext)It'd give me something to do. \w8\s[9]Other than standing around, that is.%(smalltextend)\e"
	"\0\s[6](You're getting the feeling that he's judging your taste in desktop wallpapers.)\e"
	
	//DEV: mentioning his beard.
	"\0\s[4]I miss my beard, %(username). \w8I miss it a lot. \w8\w8It was magnificent.\e"
	"\0\s[9]%(smalltext)I can't believe Willow made me shave. \w8It's a goddamn magnificent beard, what do you not get?%(smalltextend)\e"
	"\0\s[0]My beard is magnificent. \w8\s[9]%(smalltext)When it's fully grown, that is.%(smalltextend)\e"
	
	//DEV: mentioning user folders.
	"\0\s[0]I wonder what's in %(usersfolder)?\e"
	"\0\s[0]%(smalltext)Maybe I could check out that folder... \w8Whazzit called again?%(smalltextend)\e"
	"\0\s[0]%(smalltext)Maybe I could check out that folder... \w8Whazzit called again? %(usersfolder)?%(smalltextend)\e"
	"\0\s[0]Is there anything actually in %(usersfolder), %(username), or is it just some rumor I've heard?\e"
	
	//DEV: He'll sometimes disappear for a moment. This is normal.
	//DEV: MILDLY BUGGED.
	//"/0/s[0]%(smalltext)I'd better check something.%(smalltextend)\x\s[-1]\w8\w8\w8\w8\w8\w8\w8\s[0]%(smalltext)Nothing's changed.%(smalltextend)\e"
	
	//DEV: mentioning science.
	"\0\s[0]You know, they say that the path to insanity is to do the same thing, over and over and over again, while expecting different results.\e"
	"\0\s[6]%(smalltext)I could be doing so much science-y stuff right now.%(smalltextend)\e"
	"\0\s[1]What's that program you've got up? It looks science-y.\e"
	"\0\s[1]What's that program you're using? It looks science-y.\e"
	"\0\s[6]I'm still not a geologist, nor will I ever be.\e"
	
	//DEV: seafaring.
	"\0\s[6]You know the one thing I hate about seafaring? \w8My hair gets wet.\e"
	"\0\s[9]My hair keeps getting wet when we go out seafaring.\e"
	"\0\s[9]Trying to grab kelp is mildly annoying. \s[4]\w8I honestly just want to grab it so that we can have a small treat for Wurt. \w8She likes kelp.\e"
	"\0\s[4]I get that sometimes we have to feel worse to feel better, but does it really have to involve wearing a crown made of wet and horribly limp kelp?\e"
	
	//DEV: lunar islands.
	"\0\s[4]There's something weird about those islands that have come up recently.\e"
	"\0\s[4]I really don't like the islands. The-- the new ones, they've popped up recently.\e"
	
	//DEV: playing with surfaces.
	"\0\s[6](You're getting the feeling that he's judging you.)\e"
	
	//--Chains
	//Chain dialogue is unique. A dialogue chain consists of multiple bits of dialogue that get called in order over a period of time.
	
	//"\0\s[0]This is the first part of a chained dialogue.\w8\1\s[10]Second part to come when we next speak.\e:chain=firstchain"
	
	//Note here that instead of ending the dialogue with the normal end tag of \e, it ends with \e:chain=firstchain. This will link down below to a chunk of code outside RandomTalk called firstchain. You can scroll down and find it now if you want. You can name your chain anything you want, it'd just follow the same format of \e:chain=yourchainsname, and you can have a long series of chains as well. Once a dialogue has entered a chain, they won't say any other random dialogue until the chain is finished.
	
	//"\0\s[0]This will lead to the second piece of chained dialogue.\w8\1\s[10]This will have another chain attached to it.\e:chain=secondchain"
	
	//Here, this chain will link to another chain to continue the conversation. You can scroll down to the section on chains to see this in action.
	
	
	//--If statements
	//You can put if statements in RandomTalk! They don't even need Else statements, unless you want to keep two sets of statements completely separate - for example, you have one pool of conversations for when there are two characters, and one for if there are three characters. You wouldn't want these to overlap, so you'd put one pool in the if statement and the other in the else. Most of the time though, you won't need an Else statement for these, since they'll mostly only be adding in dialogue if the if statement is true. 
	
	if nowshell == "default_shell" //This checks to see what shell they're currently using. You may remember this value being defined back in bootend.dic. If they're in their default shell...
	{
	//Then these conversations are available! Note the brackets enclosing this set of dialogue.
	"\0\s[0]%(smalltext)I've always liked this waistcoat.%(smalltextend)\e"
	"\0\s[0]...Hmmn. \w8%(smalltext)I need to repair that hole in this waistcoat. \w8Maybe I could bribe Willow to do it.%(smalltextend)\e"
	}
	
	//You can also put in multiple ifs checking for the same thing to vary the responses. In this case, it's checking to see if they're wearing another shell. You don't need to use elseifs for this! Just an if is fine.
	if nowshell == "Hypothetical Shell that doesn't actually exist"
	{
	"\0\s[0]This is dialogue related to a shell we don't actually have.\w8\1\s[18]Unless it somehow pops into existence.\e"
	
	"\0\s[0]This is more dialogue related to a hypothetical shell we don't actually have.\w8\1\s[19]It's not happening.\e"
	}
	//After the if statement is done, you can continue with dialogue as normal. As you can see, you can move the ifs around in here, it doesn't really matter. You may want to stick them all in one place together if you want to keep track of them, or you can scatter them around your dialogue as you please. It's up to you. These two lines below are just normal random dialogue.
	
	//And here we're going to go back into ifs! You see, you can space out your ifs with normal dialogue if you want, as I just mentioned. Anyway, you can set up if statements to check for a lot of different things! One of the cooler ones I think are ones set to check for time. This one for example checks if the month is December.
	
	if month >= 12
	{
		"\0\s[0]%(smalltext)Why'd Willow make me shave? It's freezing!%(smalltextend)\e"
		"\0\s[0]Is it cold out there for you?\e"
		"\0\s[0]%(smalltext)Winter's Feast almost isn't worth the damn hypothermia.%(smalltextend)\e"
		"\0\s[0]Is it snowing out there for you?\e"
		"\0\s[4]...Deerclops tends to come around this time.\e"
		if day == 25
		{
			"\0\s[0]%(smalltext)Hopefully I don't miss out on anything.%(smalltextend)\e"
			"\0\s[0]%(smalltext)I was hoping to be able to cud-- er, huddle with the others.%(smalltextend)\e"
			"\0\s[0]So, how's your Winter's Feast been?\e"
		}
	}
	
	//So you can use these to check for any number of situations. I think this feature is really neat, so I'm going to set up some quick default responses for the months, days, and time of day. If you don't want to do these, you can just delete this whole set of ifs down to the //--Double Envelopes section below.
	//You can also nest ifs within these, so you could check if it was the 25 of April in the morning for example. You can also add or take away dialogue from these as you like, so if you want to have five dialogue options for April or one for January, you can totally do that.
	
	if month == 1
	{
		if day == 1
		{
			"\0\s[0]I don't suppose you've got any resolutions, have you? \w8\w8%(smalltext)Let's see how long those last.%(smalltextend)\e"
		}
		"\0\s[0]It's still cold out there, isn't it?\e"
		"\0\s[0]%(smalltext)What I wouldn't give to curl up by the fire and get warm.%(smalltextend)\e"
		"\0\s[0]%(smalltext)I wish I'd kept my beard. I look nicer with it.%(smalltextend)\e"
		"\0\s[4]Hmm. Could be a second Deerclops attack...\e"
	}
	if month == 2
	{
		"\0\s[0]%(smalltext)Well, at least the snowfall has quietened down.%(smalltextend)\e"
		"\0\s[0]%(smalltext)I really wish I kept my beard.%(smalltextend)\e"
		"\0\s[0]What's all this about a Valentine's day? \w8%(smalltext)I don't even have time for that, I've got science to do, dammit!%(smalltextend)\e"
		"\0\s[0]%(smalltext)Why was there a note on the alchemy engine? \w8All our names start with a W...%(smalltextend)\e"
	}
	if month == 3
	{
		"\0\s[0]%(smalltext)\w8.\w8.\w8.\s[9]\w8Oh, \w8god, \w8my hair is going to be absolutely ruined.%(smalltextend)\e"
		"\0\s[1]It's dry here, at least.\e"
		"\0\s[9]%(smalltext)Uuuuuugh. \w8I almost don't want to go back. \w8If only so my poor hair doesn't get even more ruined than it already is.%(smalltextend)\e"
	}
	if month == 4
	{
		if day == 1
		{
			"\0\s[9]%(smalltext)Wortox is going to have a field day if he finds out what day it is.%(smalltextend)\e"
			"\0\s[6]%(smalltext)What's all this about a fish?%(smalltextend)\e"
			"\0\s[0]So, I've learned about, eh... \s[1]poisson d'avril. \s[9]You can blame Wes for that one.\e"
		}
		"\0\s[0]It's not raining for you out there, is it?\e"
		"\0\s[9]%(smalltext)April showers. I'm sick of April showers.%(smalltextend)\e"
		"\0\s[1]Don't forget your umbrella.\e"
	}
	if month == 5
	{
		"\0\s[9]%(smalltext)Uuuuugh. STILL RAINY.%(smalltextend)\e"
		"\0\s[9]%(smalltext)My hair's going to get absolutely ruined by the time I get back.%(smalltextend)/e"
		"\0\s[0]It's still May.\e"
	}
	if month == 6
	{
		"\0\s[9]%(smalltext)One thing that's worse than Spring is Summer.%(smalltextend)\e"
		"\0\s[0]%(smalltext)Would be nice if it wasn't so hot.%(smalltextend)\e"
	}
	if month == 7
	{
		"\0\s[0]Generic dialogue for July.\e"
	}
	if month == 8
	{
		if day == 3
		{
			"\0\s[0]Have you bothered Stabbs yet? \s[1]It's his birthday.\e"
			"\0\s[0]Go on. Annoy the hell out of Stabbs. You know you want to.\e"
		}
		"\0\s[0]Generic dialogue for August. Go bother Stabbs.\e"
	}
	if month == 9
	{
		"\0\s[9]It's finally not so bloody hot.\e"
		"\0\s[1]Oh, maybe I can get some mushrooms.\e"
		"\0\s[1]%(smalltext)Hmmm. Would be nice if I could get some blue mushrooms.%(smalltextend)\e"
	}
	if month == 10
	{
		"\0\s[1]Halloween month.\e"
		"\0\s[4]%(smalltext)Should I hide some candy from the kids just in case I want some?%(smalltextend)\e"
		"\0\s[1]%(smalltext)Pumpkin cookies. Hmn.%(smalltextend)\e"
		"\0\s[1]Wes makes good cookies. \w8\w8Don't tell him I said anything.\e"
	}
	if month == 11
	{
		"\0\s[0]It's November.\e"
	}
	//These ifs check what day of the week it is.
	/*if weekday == 1
	{
		"\0\s[0]%(smalltext)Maybe I'll do some science when I get back.%(smalltextend)\e"
	}
	if weekday == 2
	{
		"\0\s[0]I don't feel like doing anything right now.\e"
		"\0\s[0]What day is it, Tuesday?\e"
		"\0\s[0]%(smalltext)Maybe I should fix up the old science machine.%(smalltextend)\e"
	}
	if weekday == 3
	{
		"\0\s[0]...It's Wednesday? Hm.\e"
		"\0\s[0]%(smalltext)Baaaaah. I can't even tell what day it is most of the time. Why would I care about whether or not it's Wednesday?%(smalltextend)\e"
		"\0\s[0]Middle of the week. Just about, anyways.\e"
	}
	if weekday == 4
	{
		
	}
	if weekday == 5
	{
		"\0\s[0]This is dialogue for Friday.\w8\1\s[10]Yup.\e"
		
		"\0\s[0]This is more dialogue for Friday.\w8\1\s[10]That it is.\e"
	}
	if weekday == 6
	{
		"\0\s[0]This is dialogue for Saturday.\w8\1\s[10]Yup.\e"
		
		"\0\s[0]This is more dialogue for Saturday.\w8\1\s[10]That it is.\e"
	}
	if weekday == 7
	{
		"\0\s[0]This is dialogue for Sunday.\w8\1\s[10]Yup.\e"
		
		"\0\s[0]This is more dialogue for Sunday.\w8\1\s[10]That it is.\e"
	}*/
	//DEV: WEEKDAYS DON'T MATTER IN THE CONSTANT.
	//These ifs check for the time of day as defined in bootend.dic. Do you remember the words used for each chunk of time in GetTimeSlot? These are the same words!
	if timeslot == "earlymorning"
	{
		"\0\s[6]%(smalltext)I almost want to ask if it was worth getting up early.%(smalltextend)\e"
		"\0\s[9]%(smalltext)I swear to god I'm going to end up chucking somebody into the sun if I'm awakened this early again.%(smalltextend)\e"
		"\0\s[9]%(smalltext)I'm tiiirrreeeeddddd.%(smalltextend)\e"
	}
	if timeslot == "morning"
	{
		"\0\s[1]Have you eaten breakfast?\e"
		"\0\s[0]%(smalltext)I... hm. Do users even need to eat?%(smalltextend)\e"
		"\0\s[9]What time is it again? Morning?\e"
	}
	if timeslot == "lunch"
	{
		"\0\s[6]%(smalltext)Oh, no, it's not like I've had a big breakfast or anything. Baaaah.%(smalltextend)\e"
		"\0\s[9]%(smalltext)...I hate getting hair in my mouth.%(smalltextend)\e"
		"\0\s[0]Aren't you going to have something to eat?\e"
	}
	if timeslot == "afternoon"
	{
		"\0\s[6]%(smalltext)I really could have gotten something done.%(smalltextend)\e"
		"\0\s[1]%(smalltext)I wanna-- \s[9]er, wanted to go back and work on a project, but nooooooo.%(smalltextend)\e"
		"\0\s[1]Oh. It's still the afternoon.\e"
	}
	if timeslot == "evening"
	{
		"\0\s[4]%(smalltext)The sun's got to be setting by now.%(smalltextend)\e"
		"\0\s[6]%(smalltext)God. I could have gotten something done.%(smalltextend)\e"
		"\0\s[1]Is the sun setting yet? \s[4]%(smalltext)I need to know.%(smalltextend)\e"
	}
	if timeslot == "latenight"
	{
		"\0\s[4]%(smalltext)I'm not sure what I'll be able to do if I'm sent back now.%(smalltextend)\e"
		"\0\s[4]%(smalltext)I'm not sure what I'll be able to do if I'm sent back now. I don't have a torch on me.%(smalltextend)\e"
		"\0\s[4]...Do you reckon the sun's set by now?\e"
	}
	if timeslot == "midnight"
	{
		"\0\s[1]What time is it again?\e"
		"\0\s[4]%(smalltext)The kids should be in bed by now.%(smalltextend)\e"
		"\0\s[6]At this time of night. \s[9]%(smalltext)I could have been sleeping.%(smalltextend)\e"
	}
	
	
	//--Double Envelopes
	//If you've gone through word.dic, you may remember a list with two sets of values on each line. This is how you would call something like that! For this example, we'll use the double envelope that cindysuke made that has a Korean word and its definition. This can be a bit complicated, so pay close attention.
	
	/*{
	_korean = lessonkor //Here, the envelope "lessonkor" is stored as a new value called _korean. You can name the new value anything you like. 
	_korword = _korean[0] //The first part of the envelope's list is the Korean word, so it will be called _korword. The first value of the _korean list is _korean[0], so that value is then stored in _korword.
	_kormean = _korean[1] //This is the second item on the list, in this case the meaning of the Korean word, so it's called _kormean. The second value of the _korean list is _korean[1], so that value is then stored in _kormean.
	
	"\1\s[10]Here is an example of a double envelope. The Korean word is %(_korword).\w8\0\s[0]The word means %(_kormean).\e"
	
	//As you can see here, you then use the values we set above for _korword and _kormean up there in the dialogue as our new envelopes. If you're planning on using a double envelope like this, study how this works very carefully! Most of the time, you can get away with just copying this whole bit of code and changing the names of the values as you need - doubled envelope to _doubled, _korword to _doubleitem1 or _kormean to _doubleitem2, or whatever. I'm not sure if the underscores are necessary, but you might as well play it safe and keep them.
	//You could possibly set up an envelope with three or four or any number of values in it, then just assign them increasing numbers like _doubleitem[4] or _doubleitem[5] in the dialogue set up here, but I've personally never tried it.
	
	//Additional Note - You can't test this kind of dialogue in Script Input. You'll have to wait until it comes up naturally in your ghost's random dialogue.
	
	//Those uninterested in double envelopes can delete this section.
	}*/
	
	//Now we're going to go back to normal dialogue for a bit of a break. Feel free to rewrite this all as you like.
	
	/*"\1\s[10]This is another piece of random dialogue to be replaced.\w8\0\s[0]Do whatever you want.\w8\1\n\n[half]\s[15]The power is yours!\w8\0\n\n[half]\s[3]Playing with power even, you could say.\e"
	
	"\1\s[10]More dialogue to be replaced.\w8\0\s[0]Remember you can write your own new lines of dialogue too.\w8\1\n\n[half]\s[10]You don't have to only replace the words in these.\e"
	
	"\1\s[10]This is another bit of dialogue to be replaced.\w8\0\s[0]aitalk.dic can be as long as you want.\e"
	
	"\0\s[6]More dialogue to be replaced.\w8\1\s[15]Follow your heart and write some text!\e"*/
	
	
	//--Multiple Responses
	//If you've poked around menu.dic or string.dic or read the walkthrough, you may have seen me touch on setting multiple options for any one given bit of dialogue. This kind of dialogue follows much the same format.
	
	/*{ //Again, note the brackets around these unique bits of dialogue.
	
	"\0\s[0]I am asking you a generic question, Triangle. Generic question?\w8\1\s[10]"
	//Notice that the last few tags set up Triangle's pose before going into his text below. You don't have to do this if you want each response to have its own pose, but if he'll have the same expression regardless of what he's saying, you might as well save yourself the work.
	-- //You've probably seen these double dashes before in other .dic files. In this case, these dashes enclose a set of multiple responses.
	"This is my first response."
	"This is my second response."
	"This is my third response."
	"This is my fourth response."
	"This is my fifth response."
	"This is my sixth response."
	//As you can see here, there are six potential replies Triangle might have to Girl's question. Each time this dialogue is called, he will randomly select one response from these six.
	-- //The closing set of dashes for his dialogue options.
	"\w8\0\s[0]\n\n[half]" //Now we're going back to Girl to set up for her multiple responses in return. This line of tags mostly just sets up for what she will say. Like above, you can see her pose is set in here with \s[0], so she'll have the same pose for each response.
	-- //opening dashes
	"First response to your response."
	"Second response to your response."
	"Third response to your response."
	"Fourth response to your response."
	//Following the same pattern as above, Girl will randomly reply with one of these bits of dialogue. Note that these responses are also randomly chosen, so it may go Triangle says response one, Girl says response three, or Triangle says response four, Girl says response two, or so on and so forth. So make sure the exchange will still make sense regardless of what either of them might say.
	-- //closing dashes
	"\e" //Dialogue ends
	}*/
	
	//Here's another example of multiple responses. This one will let you randomly choose something to say in the middle of a sentence.
	
	/*{
	"\0\s[0]Say either black or white.\w8\1\s[10]What if I say " 
	-- //opening dashes
	"green"
	"red"
	"purple"
	"orange"
	"yellow"
	"\s[18]magenta" //Notice here I added a tag for his thoughtful pose. If he chooses magenta, he'll do this pose. You can set up individual expressions for each potential choice this way.
	-- //closing dashes
	" instead?\w8\0\n\n[half]\s[9]Then you're not really cooperating.\w8\1\n\n[half]\s[15]Sounds about right.\e"
	
	//You can see that this follows the formula of the above, although there's only one set of multiple responses in here, then Triangle continues with his sentence. You can use this feature in many different ways if you're creative.
	}*/
	
	//"\0\s[0]\f[height,20]These words are really large.\f[height,default]\w8\1\s[10]These words are a normal size. \w8\f[height,6]These words are small.\f[height,default]\e"
	
	//You can use other fancier SakuraScript bits in your dialogue if you want to get font effects, although I won't get too much into them here. In this case, \f[height,20] changes the height of the font, in this case to 20 or to 6, and then \f[height,default] changes them back to normal. I touch more on this in the SakuraScript page of the walkthrough.
	
	//"\0\s[0]\f[strike,true]These words are struck out.\f[strike,default]\w8\1\s[10]\f[sub,true]These words are a subscript.\f[sub,false] \f[sup,true]These words are a superscript.\f[sup,false] \f[underline,true]These words are underlined.\f[underline,default] \f[bold,true]These words are bold.\f[bold,false] \f[italic,true]These words are italic.\f[italic,false] \f[color,186,146,112]These words are a color.\f[color,default] This tag would return to default.\f[default]\e"
	
	//Here's a list of similar tags you may find useful. You can see they function much like <b> or <i> tags in html. You just enclose the piece of text you want to change with them. Note that they start with \f[word,true] to turn it on, then \f[word,false] or \f[word,default] to turn it off. I assume you can tell what the tags do by the text they enclose.
	//For the \f[color] tag, the three colors listed are the RGB values of the color you want to use for your text. Change them to whatever color you want to use. \f[default] can be an easy way to quickly go back to the default word setting in your balloon after messing with colors and effects a lot.
	
	//"\0\s[0]Here's a link to a website. \_a[http://www.website.com/]Right here.\_a\e"
	
	//Along the same lines as above, you can use \_a[address] to link to certain things. Note that it ends with \_a to close the link. It's very similar to <a href=address> and </a> in html.
	
	//"\0\s[3]\1\s[15]\_sWe are saying this dialogue at the same time.\e" 
	
	//This dialogue uses a unique tag, \_s. \_s makes it so both characters will speak the same words at the same time. Try it in Script Input to see how it works. I talk about it a little more on the walkthrough page for scripting.
	
	//And so we reach the end of randomtalk! I again reiterate, YOU CAN AND SHOULD WRITE YOUR OWN NEW LINES OF DIALOGUE FOR THIS! I included some random example phrases here for you just to replace the text, but there really aren't that many. You'll want to add more, and doing so is easy! Just copy and paste a line and redo the text. Repeat as many times as you want with as many conversations as you want. You can always expand this section!
}


//--Chains
//Here is where you will put your bits of chain dialogue. They are outside of RandomTalk, which makes them a bit more flexible as I mentioned above. As you can see, this function is called "firstchain", which was the same tag we put at the end of the chain in aitalk with \e:chain=firstchain.

firstchain
{{CHAIN
	"\0\s[0]Here is the second part of the chain.\w8\1\s[10]Will there be more?\e:chain=end"
}}CHAIN

//Pay careful attention to the CHAIN text and double brackets for these. Double brackets, CHAIN, dialogue, double brackets, CHAIN. If you are planning on making chains, I'd recommend just copying and pasting the chain example here and changing the dialogue and name of the function as you need. Less likely for mistakes to happen, you know?
//Note also it ends with \e:chain=end, basically ending the chain.

secondchain
{{CHAIN
	"\0\s[0]This is the second piece of chained dialogue.\1\w8\s[10]This will lead to a third chain.\e:chain=thirdchain"
}}CHAIN

thirdchain
{{CHAIN
	"\0\s[0]This is the third piece of chained dialogue.\1\w8\s[10]This is the end.\e:chain=end"
}}CHAIN

//As you can see, you can chain your chains together to make a very long-running conversation if you want! Just make sure to end the chain when you're done.


//Alright, we're done with the random converations for now, but there are a few other things in aitalk that we'll need to fill out too.


//-OnMinuteChange
//These are time-related bits of dialogue for your ghost to say. If you're uninterested, you can delete it all except for a line for MikireTalk. So it'd look something like

//OnMinuteChange
//{
//timeslot = GetTimeSlot
//if mikireflag == 1
// 	{
// 		MikireTalk
//	}
//}

//But I think these are kind of neat, so I'd leave them myself.

OnMinuteChange
 {
	timeslot = GetTimeSlot //this tells the ghost what time it is so the time related conversations above will work.
	--
 	if minute == 0 //These check what time it is. Here, it's seeing if the minute equals zero...
	{
 		if hour == 12 //And the hour equals 12, ie it's noon. You can change this to some other hour if you want.
		{
 			"\0\s[0]It's noon.\e"
			"\0\s[1]There's a lot of debate as to whether this is in the morning or afternoon.\e"
			//Replace with appropriate dialogue as you want.
		}
 		elseif hour == 0 //If the hour is zero, aka midnight. Again, you can change this to whatever hour you want to check for.
		{
 			"\0\s[9]%(smalltext)Ugh, and I do my best work at this time, too.%(smalltextend)\xIt's midnight.\e"
 			"\0\s[4]It's midnight. \s[9]%(smalltext)Can I go now? I'm tired.%(smalltextend)\e"
 			"\0\s[1]Did you say goodbye? \w8\w8\s[4]No? \w8\w8I could have sworn you said something. I was hoping to get back to do some important work. \s[9]%(smalltext)Like sleeping.%(smalltextend)\e"
			//Then replace the dialogue with what's appropriate.
		}
		elseif hour == 23 //if the hour is 23, aka 11 pm.
		{
			if minute == 55 //And if the minutes are at 55.
			{
			"\0\s[1]It's five to midnight.\e"
			}
			else //if it isn't 11:55. These are meant to be examples of specific times you can check, you don't have to check for the same times. You can also always delete individual elseifs if you can't think of any time to check. Like, you could delete the elseif for hour == 23 and the subsequent checks below it, then move on to the elseif below for hour 7. This section is flexible.
			{
			"\0\s[0]It's 11 pm.\e"
			//replace the dialogue here again as you like.
			}
		}
		elseif hour == 7 && minute == 30 && weekday == 0 //Here, it's checking for a specific time on a specific day. You can add things to your time checks just like this by using the AND operator, &&. This adds up to 7:30, Sunday. If you have a favorite TV program on at some time, you could have your ghost comment on when it comes on like this.
		{
			"\0\s[0]It's 7:30 on Sunday. Oddly specific.\e"
			//Replace with what's appropriate.
		}
		elseif hour == 16 //if the hour is 16, or 4 pm. You can add in time checks for whatever times you want, or change what these time checks are looking for. These are just meant to be examples of how it works.
		{
			"\0\s[0]It's 4 pm.\e"
			//Replace with what's appropriate.
		}
		else
		{
			"\0\s[0]It's %(hour12)'o clock.\e"
			//%(hour12) stores the time. This is a general top of the hour notification. I personally like this because it helps me keep track of time when I've been working on something, so when a ghost is all "Hey it's 3 o clock" I can be like woah really when did that happen. If you think this is annoying though, you can just delete this bit of dialogue to leave this else statement blank, or leave "" in here instead.
		}
	}
	//Don't touch this part.
	elseif mikireflag == 1
 	{
 		MikireTalk
	}
 }

//--OnSecondChange
//Like the above, this handles what happens every time a second goes by. Most of this you will not have to touch.

OnSecondChange
 {
	if passsec == 60
 		{
	 	passsec = 0
 		passmin = passmin + 1
		}
 	else
 		{
	 	passsec = passsec + 1
		}
	if mikireflag == 1 && reference1 == 0
		{
			EndMikireTalk
 		}
		mikireflag = reference1
	if reference2 == 1
	{
 		//This dialogue is for when the two characters are overlapping each other. If you don't want your characters to care, you can just leave this blank.
		
 		"\0\s[6]I think I might be standing on something.\4\e"
		
		//You can see here the use of two envelopes, screenwidth and screenheight, to tell the user their resolution. Oddly, they are not in parentheses. I'm not sure why this is, but they don't display right otherwise. An odd quirk with these two envelopes.
		//Note also how Triangle moves away at the end of the dialogue. This is due to the \4 tag. That will make any one character move away from the other if they are able. I talked about this tag and its counterpart tag \5 in the SakuraScript page on the walkthrough.
	}
 }

 //---- MikireTalk ---------------------------------------------------------------------
 //I'm actually a little fuzzy on MikireTalk and what exactly it does since it shows up a lot in odd places, but for the purposes of this function here, what this does is bring up some dialogue when the main character is off the screen. For example, if you dragged Girl over to the side of your monitor until she was partially concealed by it. This dialogue would then come up. If you don't want your characters to care, you can leave the dialogue blank.
 
MikireTalk
 {
	//"\0\s[0]I'm off the screen.\w8\1\s[10]You can push Ctrl-Shift-F12 to bring her back."
	"\0\s[6]Oh, come on. %(smalltext)You've got enough screen space to have me on-screen!!%(smalltextend)\e"
	"\0\s[0]I think something just licked me!\e"
	"\0\s[9]%(smalltext)Well, this is mildly alarming.%(smalltextend)\e"
	//Note the hotkey combo Triangle mentions. He's telling the truth, that should bring her back on the screen.
 }

 //----EndMikireTalk--------------------------------------------------------------------
 //For after you bring the character back on screen.
 
EndMikireTalk
 {
	//"\0\s[0]I'm no longer off the screen.\e"
	"\0\s[6]Oh, good. \s[4]%(smalltext)I don't like being licked.%(smalltextend)\e"
	"\0\s[9]Thank science. \s[4]%(smalltext)What was that, anyways?%(smalltextend)\e"
	"\0\s[4](Well, that was uncomfortable. For him, at least.)\e"
	"\0\s[4]At least it's not fishnets. \s[9]%(smalltext)I hate that joke, it's been beating a dead horse for three years!%(smalltextend)\e"
 }


//**** OnSurfaceRestore *****************************************************************
//OnSurfaceRestore is a handy function. What this does is that after a short period of time, the ghost will go back to its default pose, so you won't have a ghost stuck in one expression for too long. It's also helpful if you've made one of the characters disappear using \s[-1] in dialogue and didn't bring them back at the end of it. This will do that for you.
//I'm going to comment out the if/else statements in this because the circumstances in which they'd come up seem pretty unlikely and unnecessary if you're just going to be making a simple ghost. You can just leave this function alone and move on if you want. However, if you do want to use them, just uncomment the lines by deleting the slashes and fill in the info as you need.

//*********************Advanced User Info*******************************
//You can put if statements in OnSurfaceRestore to make exceptions for certain poses, or to make sure that once they're in a certain pose, they stay in that pose. For example, if you turn my Hunter and Smoker ghost into eggplants, there's a check for the their eggplant pose numbers to make sure they STAY eggplants when OnSurfaceRestore is called.
//You can also use OnSurfaceRestore to clean up things that might be left on the screen, primarily from using p[number]\s[] to call up other objects or characters. Just make sure to add a p[number]\s[-1] to OnSurfaceRestore, and that should get rid of it each time the ghost cleans itself up.
//***********************************************************************

OnSurfaceRestore
 {
 	//if reference0 == 4 || reference0 == 6 //This is checking what poses they are in. This looks to see if Girl is in pose 4 or pose 6, since she is reference0.
 	//{
 	//"\1\s[10]You're in a sad pose.\w8\0\s[0]I'll go back to normal then.\e"
 	//}
 	//elseif reference1 == 14 || reference1 == 16 //This is doing the same but for Triangle, since he's reference1. It looks to see if he's in pose 14 or post 16.
 	//{
 	//"\0\s[0]You look sad.\w8\1\s[10]I'll go back to normal.\e"
 	//}
 	//else
 	//{
	"\0\s[0]\1\s[-1]\e"
	//}
 }

 
 //--OnKeyPress
 //This defines the hotkeys your ghost will use. You can change these to whatever you want, but I don't really know why you would. I'd just leave this alone. Advanced Users can add new hotkeys attached to whatever function if you want.
 
OnKeyPress
{
	if reference0 == "t"
	{
	OnAiTalk
	}
	elseif reference0 == "r"
	{
	OnLastTalk
	}
	elseif reference0 == "f1"
	{
	"\![open,readme]"
	}
}